#!/bin/bash

### BEGIN INIT INFO
# Provides:          domogik
# Required-Start:    $local_fs $network
# Required-Stop:     $local_fs $network
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Start Domogik daemons
### END INIT INFO

#This file is part of B{Domogik} project (U{http://www.domogik.org}).
#
#License
#=======
#
#B{Domogik} is free software: you can redistribute it and/or modify
#it under the terms of the GNU General Public License as published by
#the Free Software Foundation, either version 3 of the License, or
#(at your option) any later version.
#
#B{Domogik} is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
#GNU General Public License for more details.
#
#You should have received a copy of the GNU General Public License
#along with Domogik. If not, see U{http://www.gnu.org/licenses}.

# source application-specific settings
PATH=$PATH:/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin
CUSTOM_PATH=""
HUB_IFACE="lo"
LAUNCH_DOMOGIK_XPL_HUB="true"
DOMOGIK_XPL_HUB="python"
NAME=dmg_manager
C_XPLHUB=xPL_Hub
GXPL_XPLHUB=gxpl-hub
PYTHON_XPLHUB=dmg_hub
MQ_BROKER=dmg_broker
MQ_FORWARDER=dmg_forwarder
DIETIME=2
STARTTIME=5
#PIDDIR=$(grep "^pid_dir_path" /etc/domogik/domogik.cfg | cut -d " " -f 3)
PIDDIR="/var/run/domogik"
PIDFILE="$PIDDIR/manager.pid"
LOCKDIR="/var/lock/domogik"
LOGDIR="/var/log/domogik"
MASTERMQ=`grep 'is_master = [True|False]' /etc/domogik/domogik-mq.cfg | cut -d" " -f 3`

[ -f /etc/conf.d/domogik ] && . /etc/conf.d/domogik
[ -f /etc/default/domogik ] && . /etc/default/domogik

PATH=${PATH}:${CUSTOM_PATH}:
if [ ${UID} != 0 ];then
    echo "Must be run with root privileges";
    exit 1;
fi

function start {
    start_mq
    if [ ${LAUNCH_DOMOGIK_XPL_HUB} == "true" ] ; then
        start_xpl
    else
        echo "Domogik xPL hub disabled. If Domogik failed to start, make sure you have a running hub"
    fi
    start_manager
}

function start_xpl {
    echo -n " * Starting xPL (${DOMOGIK_XPL_HUB} version) ..."
    if [ "${DOMOGIK_XPL_HUB}" == "c" ] || [ "${DOMOGIK_XPL_HUB}" == "C" ] ; then
        if [ -z "$(which ${C_XPLHUB})" ];then
            echo "ERROR : ${C_XPLHUB} not in path, please install it somewhere in the path, or add CUSTOM_PATH to domogik system config file."
            exit 1
        fi
        /bin/su - ${DOMOGIK_USER} -c "$(which ${C_XPLHUB}) -interface ${HUB_IFACE} >/dev/null "
        if [ $? -gt 0 ]; then
            echo " An error occured during Xpl startup."
            exit 1
        fi

    elif [ "${DOMOGIK_XPL_HUB}" == "python" ] ; then
        if [ -z "$(which ${PYTHON_XPLHUB})" ];then
            echo "ERROR : ${PYTHON_XPLHUB} not in path, did you had any issue during the installation ?"
            exit 1
        fi
        /bin/su - ${DOMOGIK_USER} -c "$(which ${PYTHON_XPLHUB}) >/dev/null"
        if [ $? -gt 0 ]; then
            echo " An error occured during Xpl startup."
            exit 1
        fi

    elif [ "${DOMOGIK_XPL_HUB}" == "gxpl" ] ; then
        # The GxPL hub is not installed with Domogik. This is an alternate hub. See http://www.epsilonrt.com/gxPL/
        if [ -z "$(which ${GXPL_XPLHUB})" ];then
            echo "ERROR : ${GXPL_XPLHUB} not in path, did you had any issue during the installation ?"
            exit 1
        fi
        /bin/su - ${DOMOGIK_USER} -c "$(which ${GXPL_XPLHUB}) >/dev/null"
        if [ $? -gt 0 ]; then
            echo " An error occured during Xpl startup."
            exit 1
        fi

    else
        echo " The choosen xpl hub is not known by Domogik : "${DOMOGIK_XPL_HUB}
        exit 1
    fi
    echo " Done."
}

function start_manager {
    echo -n " * Starting Manager (with ${MANAGER_PARAMS}) ... "
    /bin/su - ${DOMOGIK_USER} -c "export PATH=/usr/sbin:${PATH} && ${NAME} ${MANAGER_PARAMS}" > /dev/null
    if [ $? -gt 0 ]; then
        echo " "
        echo " An error occured during manager startup."
        exit 1
    fi
    sleep ${STARTTIME}
    echo " Done."
}
function start_mq {
    if [ "X$MASTERMQ" = "X" ]; then
        echo " * ERROR : MQ is not installed. Please install it"
        exit 1
    fi 
    if [ $MASTERMQ = "True" ]; then
        echo -n " * Starting 0MQ broker ..."
        /bin/su - ${DOMOGIK_USER} -c "$(which ${MQ_BROKER}) >/dev/null"
        if [ $? -gt 0 ]; then
            echo " An error occured during 0MQ broker startup."
            exit 1
        fi
        echo " Done."
        echo -n " * Starting 0MQ forwarder ..."
        #original command# /bin/su - ${DOMOGIK_USER} -c "$(which ${MQ_FORWARDER}) >/dev/null"
        nohup /bin/su - ${DOMOGIK_USER} -c "$(which ${MQ_FORWARDER}) >/dev/null " > /dev/null 2>&1 &
        if [ $? -gt 0 ]; then
            echo " An error occured during 0MQ forwarder startup."
            exit 1
        fi
        echo " Done."
    fi
}

function status_mq {
    if [ $MASTERMQ = "True" ]; then
        set +e
        RUNNING=$(/usr/bin/pgrep -c ${MQ_BROKER})
        set -e
        if [ ! -z ${RUNNING} ] && [ ${RUNNING} -gt 0 ] ; then
            echo " * ${MQ_BROKER} is running"
        else
            echo " * ${MQ_BROKER} is not running"
        fi
        set +e
        RUNNING=$(/usr/bin/pgrep -c ${MQ_FORWARDER})
        set -e
        if [ ! -z ${RUNNING} ] && [ ${RUNNING} -gt 0 ] ; then
            echo " * ${MQ_FORWARDER} is running"
        else
            echo " * ${MQ_FORWARDER} is not running"
        fi
    fi
}

function status {
    [ ! -f ${PIDFILE} ] && \
        echo " * Domogik is not running (can't find pid file)" &&
        exit 0
    RUNNING=$(pgrep "${NAME}" | grep -c $(cat ${PIDFILE} 2>/dev/null) 2>/dev/null)
    if [ ! -z ${RUNNING} ] && [ ${RUNNING} -eq 1 ]; then
        echo " * Domogik is running"
    else
        echo " * Domogik is not running"
    fi
}

function status_manager {
    if [ -f ${PIDFILE} ] && [ $(/bin/ps `cat ${PIDFILE} 2>/dev/null` | /bin/grep -c "$" 2>/dev/null) -gt 1 ] ; then
        echo " * manager is running"
    else
        echo " * manager is not running"
    fi
    if [ -f ${PIDDIR}/admin.pid ] && [ $(/bin/ps `cat ${PIDDIR}/admin.pid 2>/dev/null` | /bin/grep -c "$" 2>/dev/null) -gt 1 ] ; then
        echo " * admin is running"
    else
        echo " * admin is not running"
    fi
}

function status_xpl {
    if [ "${DOMOGIK_XPL_HUB}" == "c" ] || [ "${DOMOGIK_XPL_HUB}" == "C" ] ; then
        set +e
        RUNNING=$(/usr/bin/pgrep -c ${C_XPLHUB})
        set -e
        if [ ! -z ${RUNNING} ] && [ ${RUNNING} -gt 0 ] ; then
            echo " * ${C_XPLHUB} is running"
        else
            echo " * ${C_XPLHUB} is not running"
        fi

    elif [ "${DOMOGIK_XPL_HUB}" == "python" ] ; then
        set +e
        RUNNING=$(/usr/bin/pgrep -c ${PYTHON_XPLHUB})
        set -e
        if [ ! -z ${RUNNING} ] && [ ${RUNNING} -gt 0 ] ; then
            echo " * ${PYTHON_XPLHUB} is running"
        else
            echo " * ${PYTHON_XPLHUB} is not running"
        fi

    elif [ "${DOMOGIK_XPL_HUB}" == "gxpl" ] ; then
        set +e
        RUNNING=$(/usr/bin/pgrep -c ${GXPL_XPLHUB})
        set -e
        if [ ! -z ${RUNNING} ] && [ ${RUNNING} -gt 0 ] ; then
            echo " * ${GXPL_XPLHUB} is running"
        else
            echo " * ${GXPL_XPLHUB} is not running"
        fi

    else
        echo " The choosen xpl hub is not known by Domogik : "${DOMOGIK_XPL_HUB}
        exit 1
    fi
}

function stop {
    stop_plugins
    stop_manager
    if [ ${LAUNCH_DOMOGIK_XPL_HUB} == "true" ] ; then
        stop_xpl
    else
        echo "Domogik xPL hub disabled : no need to stop Domogik xPL hub"
    fi
    stop_mq
    kill_all
}

function stop_mq {
    if [ "X$MASTERMQ" = "X" ]; then
        echo " * ERROR : MQ is not installed. Please install it"
        exit 1
    fi 
    if [ $MASTERMQ = "True" ]; then
        echo -n " * Stopping 0MQ broker..."
        for pid in `ps ax | grep "${MQ_BROKER}" | grep -v grep | awk '{print $1}'`; do
            kill -15 $pid 2>/dev/null 1>&2
            sleep ${DIETIME}
            kill -9 $pid 2>/dev/null 1>&2
        done
        echo " Done."
        echo -n " * Stopping 0MQ forwarder..."
        for pid in `ps ax | grep "${MQ_FORWARDER}" | grep -v grep | awk '{print $1}'`; do
            kill -15 $pid 2>/dev/null 1>&2
            sleep ${DIETIME}
            kill -9 $pid 2>/dev/null 1>&2
        done
        echo " Done."
    fi
}

function stop_xpl {
    echo -n " * Stopping XPL..."
    if [ "${DOMOGIK_XPL_HUB}" == "c" ] || [ "${DOMOGIK_XPL_HUB}" == "C" ] ; then
        for pid in `ps ax | grep "${C_XPLHUB}" | grep -v grep | awk '{print $1}'`; do
            kill -15 $pid 2>/dev/null 1>&2
            sleep ${DIETIME}
            kill -9 $pid 2>/dev/null 1>&2
        done

    elif [ "${DOMOGIK_XPL_HUB}" == "python" ] ; then
        for pid in `ps ax | grep "${PYTHON_XPLHUB}" | grep -v grep | awk '{print $1}'`; do
            kill -15 $pid 2>/dev/null 1>&2
            sleep ${DIETIME}
            kill -9 $pid 2>/dev/null 1>&2
        done

    elif [ "${DOMOGIK_XPL_HUB}" == "gxpl" ] ; then
        for pid in `ps ax | grep "${GXPL_XPLHUB}" | grep -v grep | awk '{print $1}'`; do
            kill -15 $pid 2>/dev/null 1>&2
            sleep ${DIETIME}
            kill -9 $pid 2>/dev/null 1>&2
        done

    else
        echo " The choosen xpl hub is not known by Domogik : "${DOMOGIK_XPL_HUB}
        exit 1
    fi
    echo " Done."
}

function stop_manager {
    echo -n " * Stopping Manager..."
    kill $(cat ${PIDFILE} 2>/dev/null) >/dev/null 2>&1
    sleep ${DIETIME}
    RUNNING=$(pgrep "${NAME}" | grep -c $(cat ${PIDFILE} 2>/dev/null) 2>/dev/null)
    if [ ! -z ${RUNNING} ] && [ ${RUNNING} -eq 1 ]; then
        kill $(cat ${PIDFILE} 2>/dev/null) >/dev/null 2>&1
        sleep ${DIETIME}
    fi
    RUNNING=$(pgrep "${NAME}" | grep -c $(cat ${PIDFILE} 2>/dev/null) 2>/dev/null)
    if [ ! -z ${RUNNING} ] && [ ${RUNNING} -eq 1 ]; then
        kill -9 $(cat ${PIDFILE} 2>/dev/null) >/dev/null 2>&1
        sleep ${DIETIME}
    fi
    RUNNING=$(pgrep "${NAME}" | grep -c $(cat ${PIDFILE} 2>/dev/null) 2>/dev/null)
    if [ ! -z ${RUNNING} ] && [ ${RUNNING} -gt 0 ]; then
        echo " Can't stop domogik."
    else
        rm -f ${PIDFILE} 2>/dev/null
        echo " Done."
    fi
}

function stop_plugins {
    echo -n " * Stopping Plugins..."
    [ -z ${HOSTNAME} ] && HOSTNAME=$(cat /etc/hostname)
    # commented because it is not working..
    # the manager does the kill plugin stuff for now
    #[ -f ${PIDFILE} ] && \
    #    su - ${DOMOGIK_USER} -c "dmg_send  xpl-cmnd domogik.system 'command=stop,plugin=*,host=${HOSTNAME}' > /dev/null" && \
    #    sleep ${DIETIME}
#    for pid in `ps ax | egrep "domogik.*\.pyc$" | grep -v grep | awk '{print $1}'`; do
#        kill -15 $pid 2>/dev/null 1>&2
#    done
#    sleep 2
#    for pid in `ps ax | egrep "domogik.*\.pyc$" | grep -v grep | awk '{print $1}'`; do
#        kill -9 $pid 2>/dev/null 1>&2
#    done
    echo " Done."
}

kill_all() {
    for f in $(find ${PIDDIR}/*.pid 2>/dev/null); do
        kill $(cat $f 2>/dev/null) >/dev/null 2>&1
    done
    for f in $(find ${PIDDIR}/*.pid 2>/dev/null); do
        kill $(cat $f 2>/dev/null) >/dev/null 2>&1
    done
    sleep ${DIETIME}
    for f in $(find ${PIDDIR}/*.pid 2>/dev/null); do
        kill -9 $(cat $f 2>/dev/null) >/dev/null 2>&1
        rm -f $f 2>/dev/null
    done
    for p in $(pgrep "${NAME}" 2>/dev/null); do
        kill -9 $p >/dev/null 2>&1
    done
    for p in $(pgrep "gunicorn" 2>/dev/null); do
        kill -9 $p >/dev/null 2>&1
    done
}

# Check if the directory for lock exists
function check_lock_dir {
    #USER_HOME=$(grep $DOMOGIK_USER /etc/passwd | cut -d":" -f6)
    if [ ! -d ${PIDDIR} ];then
        mkdir ${PIDDIR}
    fi
    [ -p ${PIDDIR}/dmg-manager-state ] && rm -f ${PIDDIR}/dmg-manager-state
    chown -R ${DOMOGIK_USER}: ${PIDDIR}
    [ ! -d ${LOCKDIR} ] && mkdir ${LOCKDIR}
    chown -R ${DOMOGIK_USER}: ${LOCKDIR}
    [ ! -d ${LOGDIR} ] && mkdir ${LOGDIR}
    chown -R ${DOMOGIK_USER}: ${LOGDIR}
}


case "$1" in
    start)
        if [ $# -eq 1 ];then
            check_lock_dir
            [ -f ${PIDFILE} ] && echo "Domogik seems to be running or is crashed. Please use stop to kill all remainings tasks." && exit 0
            start
            sleep ${STARTTIME}
            sleep ${STARTTIME}
        else
            case "$2" in
                mq)
                    start_mq
                ;;
                xpl)
                    start_xpl
                ;;
                manager)
                    check_lock_dir
                    [ -f ${PIDFILE} ] && echo "Domogik seems to be running or is crashed. Please use stop to kill all remainings tasks." && exit 0
                    start_manager
                    ;;
                *)
                    echo "usage: $0 start [manager|xpl|mq]"
                ;;
            esac
        fi
        ;;
    stop)
        if [ $# -eq 1 ];then
            stop
        else
            case "$2" in
                mq)
                    stop_mq
                ;;
                xpl)
                    stop_xpl
                ;;
                manager)
                    check_lock_dir
                    stop_plugins
                    sleep ${DIETIME}
                    stop_manager
                ;;
                *)
                    echo "usage: $0 stop [manager|xpl|mq]"
                ;;
            esac
        fi
        ;;
    restart)
        if [ $# -eq 1 ];then
            check_lock_dir
            stop
            sleep ${DIETIME}
            sleep ${DIETIME}
            start
            sleep ${STARTTIME}
        else
            case "$2" in
                mq)
                    stop_mq
                    sleep ${DIETIME}
                    start_mq
                ;;
                xpl)
                    stop_xpl
                    sleep ${DIETIME}
                    start_xpl
                ;;
                manager)
                    check_lock_dir
                    stop_plugins
                    stop_manager
                    kill_all
                    sleep ${DIETIME}
                    sleep ${DIETIME}
                    start_manager
                    ;;
                *)
                    echo "usage: $0 restart [manager|xpl|mq]"
                ;;
            esac
        fi
        ;;
    status)
        if [ $# -eq 1 ];then
            status
        else
            case "$2" in
                mq)
                    status_mq
                ;;
                manager)
                    status_manager
                ;;
                xpl)
                    status_xpl
                ;;
                *)
                    echo "usage: $0 status [manager|xpl|mq]"
                ;;
            esac
        fi
        ;;
    *)
    echo "usage: $0 {start|stop|restart|status} [(manager|xpl|mq)]"
    echo "More help : $0 command help"
esac
exit 0
